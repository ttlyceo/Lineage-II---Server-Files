<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr"><head><!--
        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
              This file is generated from xml source: DO NOT EDIT
        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      -->
<title>Techniques avancées de réécriture avec mod_rewrite - Serveur Apache HTTP</title>
<link href="../style/css/manual.css" rel="stylesheet" media="all" type="text/css" title="Main stylesheet" />
<link href="../style/css/manual-loose-100pc.css" rel="alternate stylesheet" media="all" type="text/css" title="No Sidebar - Default font size" />
<link href="../style/css/manual-print.css" rel="stylesheet" media="print" type="text/css" />
<link href="../images/favicon.ico" rel="shortcut icon" /></head>
<body id="manual-page"><div id="page-header">
<p class="menu"><a href="../mod/">Modules</a> | <a href="../mod/directives.html">Directives</a> | <a href="../faq/">FAQ</a> | <a href="../glossary.html">Glossaire</a> | <a href="../sitemap.html">Plan du site</a></p>
<p class="apache">Serveur Apache HTTP Version 2.4</p>
<img alt="" src="../images/feather.gif" /></div>
<div class="up"><a href="./"><img title="&lt;-" alt="&lt;-" src="../images/left.gif" /></a></div>
<div id="path">
<a href="http://www.apache.org/">Apache</a> &gt; <a href="http://httpd.apache.org/">Serveur HTTP</a> &gt; <a href="http://httpd.apache.org/docs/">Documentation</a> &gt; <a href="../">Version 2.4</a> &gt; <a href="./">Rewrite</a></div><div id="page-content"><div id="preamble"><h1>Techniques avancées de réécriture avec mod_rewrite</h1>
<div class="toplang">
<p><span>Langues Disponibles: </span><a href="../en/rewrite/avoid.html" hreflang="en" rel="alternate" title="English">&nbsp;en&nbsp;</a> |
<a href="../fr/rewrite/avoid.html" title="Français">&nbsp;fr&nbsp;</a></p>
</div>


<p>Ce document complète la <a href="../mod/mod_rewrite.html">documentation de référence</a> du
    module <code class="module"><a href="../mod/mod_rewrite.html">mod_rewrite</a></code>. Il présente un certain nombre
    de techniques avancées quant à
    l'utilisation de mod_rewrite.</p>

<div class="warning">Notez que la plupart des exemples ne fonctionneront
pas en l'état dans la configuration particulière de votre serveur ; il
est donc important de bien comprendre leur fonctionnement, plutôt que de
simplement les copier/coller dans votre configuration.</div>

</div>
<div id="quickview"><ul id="toc"><li><img alt="" src="../images/down.gif" /> <a href="#sharding">Distribution de la charge entre plusieurs serveurs
  d'arrière-plan en fonction de l'adresse IP</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#on-the-fly-content">Régéneration de contenu à la volée</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#load-balancing">Répartition de charge</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#autorefresh">Actualisation automatique d'un document</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#structuredhomedirs">Répertoires Home structurés</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#redirectanchors">Redirection des ancrages</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#time-dependent">Réécriture dépendant de l'heure</a></li>
<li><img alt="" src="../images/down.gif" /> <a href="#setenvvars">Définir des variables d'environnement en fonction de
      certaines parties de l'URL</a></li>
</ul><h3>Voir aussi</h3><ul class="seealso"><li><a href="../mod/mod_rewrite.html">Documentation du module</a></li><li><a href="intro.html">Introduction à mod_rewrite</a></li><li><a href="remapping.html">Redirection et remise en
correspondance</a></li><li><a href="access.html">Contrôler l'accès</a></li><li><a href="vhosts.html">serveurs virtuels</a></li><li><a href="proxy.html">serveurs mandataires</a></li><li><a href="rewritemap.html">Utilisation de RewriteMap</a></li><li><a href="avoid.html">Quand ne pas utiliser mod_rewrite</a></li></ul></div>
<div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="sharding" id="sharding">Distribution de la charge entre plusieurs serveurs
  d'arrière-plan en fonction de l'adresse IP</a></h2>

  

  <dl>
    <dt>Description :</dt>

    <dd>
      <p>La fragmentation ou "sharding" est une technique courante de
      distribution de la charge du serveur ou de l'espace de stockage.
      Quand on utilise cette méthode, un serveur frontal utilise l'URL
      pour répartir de manière appropriée les utilisateurs et objets
      entre différents serveurs d'arrière-plan.</p>
    </dd>

    <dt>Solution :</dt>

    <dd>
      <p>On maintient une table de correspondance entre utilisateurs et
      serveurs cibles dans des fichiers externes. Ces derniers se
      présentent comme suit :</p>

<div class="example"><p><code>
utilisateur1  serveur_physique_utilisateur1<br />
utilisateur2  serveur_physique_utilisateur2<br />
:      :
</code></p></div>

  <p>Tout ceci est enregistré dans un fichier
  <code>correspondances-utilisateurs-serveurs</code>. Le but est de
  faire correspondre</p>

<div class="example"><p><code>
/u/utilisateur1/chemin
</code></p></div>

  <p>avec</p>

<div class="example"><p><code>
http://serveur_physique_utilisateur1/u/utilisateur/chemin
</code></p></div>

      <p>il n'est ainsi pas nécessaire que tous les chemins URL soient
      valides sur tous les serveurs physiques d'arrière-plan. Le jeu de
      règles suivant fait tout ceci pour nous, en s'appuyant sur les
      fichiers de correspondances, en supposant que serveur0 est un
      serveur par défaut qui sera utilisé lorsqu'un utilisateur ne
      possèdera pas d'entrée dans la table de correspondances :</p>

<div class="example"><p><code>
RewriteEngine on<br />
<br />
RewriteMap      utilisateurs-serveurs
txt:/chemin/vers/correspondances-utilisateurs-serveurs<br />
<br />
RewriteRule   ^/u/<strong>([^/]+)</strong>/?(.*)   http://<strong>${utilisateurs-serveurs:$1|server0}</strong>/u/$1/$2
</code></p></div>
    </dd>
  </dl>

  <p>Voir la documentation de <code class="directive"><a href="../mod/mod_rewrite.html#rewritemap">RewriteMap</a></code> pour une description plus
  approfondie de la syntaxe de cette directive.</p>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="on-the-fly-content" id="on-the-fly-content">Régéneration de contenu à la volée</a></h2>

  

  <dl>
    <dt>Description :</dt>

    <dd>
      <p>Nous voulons générer du contenu de manière dynamique, mais le
      conserver de manière statique lorsqu'il a été généré. La règle
      suivante vérifie l'existence du fichier statique, et le génère
      s'il est absent. Les fichiers statiques peuvent être supprimés
      périodiquement si on le désire (par exemple via cron), et seront
      régénérés à la demande.</p>
    </dd>

    <dt>Solution :</dt>

    <dd>
      À cet effet, on utilise le jeu de règles suivant :

<div class="example"><p><code>
# Cet exemple n'est valable que dans un contexte de répertoire<br />
RewriteCond %{REQUEST_URI}   <strong>!-U</strong><br />
RewriteRule ^(.+)\.html$          /regenerate_page.cgi   [PT,L]
</code></p></div>

      <p>L'opérateur <code>-U</code> permet de déterminer si la chaîne
      de test (dans ce cas <code>REQUEST_URI</code>) est une URL valide.
      Pour ce faire, il utilise une sous-requête. Si cette sous-requête
      échoue, ou en d'autres termes, si la ressource demandée n'existe pas,
      cette règle invoque le programme CGI
      <code>/regenerate_page.cgi</code> qui génère la ressource
      demandée et la sauvegarde dans le répertoire des documents, de
      façon à ce qu'une copie statique puisse être servie lors d'une
      demande ultérieure.</p>

    <p>De cette façon, les documents qui ne sont pas mis à jour
    régulièrement peuvent être servis sous une forme statique. Si ces
    documents doivent être réactualisés, on peut les supprimer du
    répertoire des documents, et ils seront ainsi régénérés à la
    prochaine demande.</p>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="load-balancing" id="load-balancing">Répartition de charge</a></h2>

  

  <dl>
    <dt>Description :</dt>

    <dd>
      <p>Nous voulons répartir la charge de manière aléatoire entre
      plusieurs serveurs en utilisant mod_rewrite.</p>
    </dd>

    <dt>Solution :</dt>

    <dd>
      <p>Pour y parvenir, nous allons utiliser la directive <code class="directive"><a href="../mod/mod_rewrite.html#rewritemap">RewriteMap</a></code> et une liste de
      serveurs.</p>

<div class="example"><p><code>
RewriteEngine on<br />
RewriteMap lb rnd:/chemin/vers/liste-serveurs.txt<br />
<br />
RewriteRule ^/(.*) http://${lb:serveurs}/$1 [P,L]
</code></p></div>

<p><code>liste-serveurs.txt</code> contiendra la liste des serveurs :</p>

<div class="example"><p><code>
## liste-serveurs.txt<br />
<br />
serveurs un.example.com|deux.example.com|trois.example.com<br />
</code></p></div>

<p>Si vous voulez qu'un serveur se voit confier d'avantage de charge que
les autres, faites le figurer plusieurs fois dans la liste.</p>

   </dd>

   <dt>Discussion</dt>
   <dd>
<p>Apache possède un module de répartition de charge -
<code class="module"><a href="../mod/mod_proxy_balancer.html">mod_proxy_balancer</a></code> - beaucoup plus souple et présentant
plus de fonctionnalités dans ce domaine que mod_rewrite.</p>
   </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="autorefresh" id="autorefresh">Actualisation automatique d'un document</a></h2>

  

  

  <dl>
    <dt>Description :</dt>

    <dd>
      <p>Lorsque nous créons une page web complexe, ne serait-il pas
	  souhaitable que le navigateur web actualise automatiquement la
	  page chaque fois que nous en sauvegardons une nouvelle version
	  à partir de notre éditeur ? Impossible ?</p>
    </dd>

    <dt>Solution :</dt>

    <dd>
      <p>Non ! Nous allons pour cela combiner la fonctionnalité MIME
	  multipart, la fonctionnalité NPH du serveur web et la
	  puissance de <code class="module"><a href="../mod/mod_rewrite.html">mod_rewrite</a></code> pour la manipulation
	  d'URLs. Tout d'abord, nous définissons une nouvelle
	  fonctionnalité pour les URLs : l'ajout de
	  <code>:refresh</code> à toute URL fait que la 'page' est
	  actualisée chaque fois que la ressource est mise à jour dans
	  le système de fichiers.</p>

<div class="example"><p><code>
RewriteRule   ^(/[uge]/[^/]+/?.*):refresh  /interne/cgi/apache/nph-refresh?f=$
</code></p></div>

      <p>Nous appelons maintenant cette URL</p>

<div class="example"><p><code>
/u/foo/bar/page.html:refresh
</code></p></div>

      <p>ce qui entraîne en interne l'invocation de l'URL</p>

<div class="example"><p><code>
/interne/cgi/apache/nph-refresh?f=/u/foo/bar/page.html
</code></p></div>

      <p>Il ne reste plus qu'à écrire le script NPH-CGI. Bien que l'on
	  écrive habituellement dans ces cas "laissé à la charge du
	  lecteur à titre d'exercice", ;-) je vous l'offre, aussi.</p>

<div class="example"><pre>
#!/sw/bin/perl
##
##  nph-refresh -- script NPH/CGI pour l'actualisation automatique de
##  pages
##  Copyright (c) 1997 Ralf S. Engelschall, All Rights Reserved.
##
$| = 1;

#   éclate la variable QUERY_STRING
@pairs = split(/&amp;/, $ENV{'QUERY_STRING'});
foreach $pair (@pairs) {
($name, $value) = split(/=/, $pair);
$name =~ tr/A-Z/a-z/;
$name = 'QS_' . $name;
$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
eval "\$$name = \"$value\"";
}
$QS_s = 1 if ($QS_s eq '');
$QS_n = 3600 if ($QS_n eq '');
if ($QS_f eq '') {
print "HTTP/1.0 200 OK\n";
print "Content-type: text/html\n\n";
print "&amp;lt;b&amp;gt;ERREUR&amp;lt;/b&amp;gt;: Aucun fichier fourni\n";
exit(0);
}
if (! -f $QS_f) {
print "HTTP/1.0 200 OK\n";
print "Content-type: text/html\n\n";
print "&amp;lt;b&amp;gt;ERREUR&amp;lt;/b&amp;gt;: Fichier $QS_f non trouvé\n";
exit(0);
}

sub print_http_headers_multipart_begin {
print "HTTP/1.0 200 OK\n";
$bound = "ThisRandomString12345";
print "Content-type: multipart/x-mixed-replace;boundary=$bound\n";
&amp;print_http_headers_multipart_next;
}

sub print_http_headers_multipart_next {
print "\n--$bound\n";
}

sub print_http_headers_multipart_end {
print "\n--$bound--\n";
}

sub displayhtml {
local($buffer) = @_;
$len = length($buffer);
print "Content-type: text/html\n";
print "Content-length: $len\n\n";
print $buffer;
}

sub readfile {
local($file) = @_;
local(*FP, $size, $buffer, $bytes);
($x, $x, $x, $x, $x, $x, $x, $size) = stat($file);
$size = sprintf("%d", $size);
open(FP, "&amp;lt;$file");
$bytes = sysread(FP, $buffer, $size);
close(FP);
return $buffer;
}

$buffer = &amp;readfile($QS_f);
&amp;print_http_headers_multipart_begin;
&amp;displayhtml($buffer);

sub mystat {
local($file) = $_[0];
local($time);

($x, $x, $x, $x, $x, $x, $x, $x, $x, $mtime) = stat($file);
return $mtime;
}

$mtimeL = &amp;mystat($QS_f);
$mtime = $mtime;
for ($n = 0; $n &amp;lt; $QS_n; $n++) {
while (1) {
    $mtime = &amp;mystat($QS_f);
    if ($mtime ne $mtimeL) {
        $mtimeL = $mtime;
        sleep(2);
        $buffer = &amp;readfile($QS_f);
        &amp;print_http_headers_multipart_next;
        &amp;displayhtml($buffer);
        sleep(5);
        $mtimeL = &amp;mystat($QS_f);
        last;
    }
    sleep($QS_s);
}
}

&amp;print_http_headers_multipart_end;

exit(0);

##EOF##
</pre></div>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="structuredhomedirs" id="structuredhomedirs">Répertoires Home structurés</a></h2>

  

  <dl>
    <dt>Description :</dt>

    <dd>
      <p>Certains sites avec des milliers d'utilisateurs organisent
	  les répertoires utilisateurs de manière structurée, c'est à
	  dire que chaque répertoire utilisateur se trouve dans un
	  sous-répertoire dont le nom commence (par exemple) par le
	  premier caractère du nom de l'utilisateur. Ainsi,
	  <code>/~larry/chemin</code> correspond à
	  <code>/home/<strong>l</strong>/larry/public_html/chemin</code>, alors
	  que <code>/~waldo/chemin</code> correspond à
	  <code>/home/<strong>w</strong>/waldo/public_html/chemin</code>.</p>
    </dd>

    <dt>Solution :</dt>

    <dd>
      <p>On utilise le jeu de règles suivant pour développer les
	  URLs avec tilde selon l'organisation structurée précédente.</p>

<div class="example"><p><code>
RewriteEngine on<br />
RewriteRule   ^/~(<strong>([a-z])</strong>[a-z0-9]+)(.*)  /home/<strong>$2</strong>/$1/public_html$3
</code></p></div>
    </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="redirectanchors" id="redirectanchors">Redirection des ancrages</a></h2>

  

  <dl>
    <dt>Description :</dt>

    <dd>
    <p>Par défaut, la redirection vers un ancrage HTML ne fonctionne
	pas, car mod_rewrite échappe le caractère <code>#</code> en le
	transformant en <code>%23</code>, ce qui rend la redirection
	inopérante.</p>
    </dd>

    <dt>Solution :</dt>

    <dd>
      <p>On utilise le drapeau <code>[NE]</code> dans la règle
	  <code>RewriteRule</code>. NE signifie "No Escape".
      </p>
    </dd>

    <dt>Discussion :</dt>
    <dd>Cette technique fonctionne bien entendu pour tout autre
    caractère spécial que mod_rewrite, par défaut, code pour insertion
    dans une URL.</dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="time-dependent" id="time-dependent">Réécriture dépendant de l'heure</a></h2>

  

  <dl>
    <dt>Description :</dt>

    <dd>
      <p>Nous voulons servir des contenus différents selon l'heure du
      jour en utilisant mod_rewrite.</p>
    </dd>

    <dt>Solution :</dt>

    <dd>
      <p>Il existe de nombreuses variables nommées
	  <code>TIME_xxx</code> utilisables dans les conditions de
	  réécriture. Utilisées en conjonction avec les modèles de
	  comparaison lexicographique spéciaux <code>&lt;STRING</code>,
	  <code>&gt;STRING</code> et <code>=STRING</code>, elles
	  permettent d'effectuer des redirections dépendant de
	  l'heure :</p>

<div class="example"><p><code>
RewriteEngine on<br />
RewriteCond   %{TIME_HOUR}%{TIME_MIN} &gt;0700<br />
RewriteCond   %{TIME_HOUR}%{TIME_MIN} &lt;1900<br />
RewriteRule   ^foo\.html$             foo.jour.html [L]<br />
RewriteRule   ^foo\.html$             foo.nuit.html
</code></p></div>

      <p>Avec cet exemple, l'URL <code>foo.html</code> renvoie
	  le contenu de <code>foo.jour.html</code> durant le
	  créneau horaire <code>07:01-18:59</code>, et le contenu de
	  <code>foo.nuit.html</code> le reste du temps.</p>

      <div class="warning"><code class="module"><a href="../mod/mod_cache.html">mod_cache</a></code>, les mandataires
	intermédiaires et les navigateurs peuvent chacun mettre en cache
	les réponses et ainsi afficher une des deux pages en dehors de
	la fenêtre de temps configurée. On peut utiliser
	<code class="module"><a href="../mod/mod_expires.html">mod_expires</a></code> pour contourner ce problème. Il est
	cependant bien plus commode de servir un contenu dynamique, et
	de le personnaliser en fonction de l'heure du jour.</div> </dd>
  </dl>

</div><div class="top"><a href="#page-header"><img alt="top" src="../images/up.gif" /></a></div>
<div class="section">
<h2><a name="setenvvars" id="setenvvars">Définir des variables d'environnement en fonction de
      certaines parties de l'URL</a></h2>

  

  <dl>
    <dt>Description :</dt>

    <dd>
      <p>Ici, nous voulons conserver une certaine forme de statut
      lorsqu'une réécriture a eu lieu. Par exemple, vous souhaitez
      consigner le fait que cette réécriture a eu lieu, et vous servir
      plus tard de cette information pour déterminer si une requête sera
      concernée par cette réécriture. Pour y parvenir, on peut utiliser
      une variable d'environnement.</p>
    </dd>

    <dt>Solution :</dt>

    <dd>
      <p>Utiliser le drapeau [E] pour définir une variable
      d'environnement.</p>

<div class="example"><p><code>
RewriteEngine on<br />
RewriteRule   ^/cheval/(.*)   /poney/$1 [E=<strong>rewritten:1</strong>]
</code></p></div>

    <p>Plus loin dans votre jeu de règles, vous pouvez vérifier le
    contenu de cette variable d'environnement via une directive
    RewriteCond :</p>

<div class="example"><p><code>
RewriteCond %{ENV:rewritten} =1
</code></p></div>

    </dd>
  </dl>

</div></div>
<div class="bottomlang">
<p><span>Langues Disponibles: </span><a href="../en/rewrite/avoid.html" hreflang="en" rel="alternate" title="English">&nbsp;en&nbsp;</a> |
<a href="../fr/rewrite/avoid.html" title="Français">&nbsp;fr&nbsp;</a></p>
</div><div id="footer">
<p class="apache">Copyright 2012 The Apache Software Foundation.<br />Autorisé sous <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>.</p>
<p class="menu"><a href="../mod/">Modules</a> | <a href="../mod/directives.html">Directives</a> | <a href="../faq/">FAQ</a> | <a href="../glossary.html">Glossaire</a> | <a href="../sitemap.html">Plan du site</a></p></div>
</body></html>